Op	Name	HLL meaning	Description
3	load	a := mem[addr]	load accumulator from memory
4	store	mem[addr] := a	store accumulator into memory
5	add	a := a + mem[addr]	add memory to accumulator
6	sub	a := a - mem[addr]	add memory from accumulator
7	and	a := a ∧ mem[addr]	logical 'and' memory into accumulator
8	or	a := a ∨ mem[addr]	logical 'or' memory into accumulator
9	xor	a := a ⊕ mem[addr]	logical 'xor' memory into accumulator
A	not	a := ~a	logical complement of accumulator
B	nop	/* */	do nothing (no operation)
C	jmp	goto addr	jump to 'addr'
D	jmpe	if a == 0 goto addr	jump to 'addr' if accumulator equals zero
E	jmpl	if a < 0 goto addr	jump to 'addr' if accum. is less than zero
F	brl	a := PC+1; goto addr
